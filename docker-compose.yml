services:

  postgres:
    container_name: telegram_shop-postgres
    image: postgres:latest
    env_file: ".env"
    command: -c 'max_connections=500'
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - ./data/postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - postgres_network

  redis:
    container_name: telegram_shop-redis
    image: redis:latest
    ports:
      - "6379:6379"
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    restart: unless-stopped
    volumes:
      - ./data/redisdata_dev:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ulimits:
      nofile:
        soft: 200000
        hard: 200000
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1.0"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - redis_network

  bot:
    container_name: telegram_shop-bot
    build:
      context: .
      dockerfile: ./telegram/Dockerfile.bot
    command: >
      sh -c ". ./telegram/.venv/bin/activate && \
      python -m telegram.src.main"
    env_file: ".env"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    networks:
      - redis_network
      - postgres_network

  admin-panel:
    container_name: telegram_shop-admin
    build:
      context: .
      dockerfile: ./admin/Dockerfile.admin
    expose:
      - 8000
    command: >
      sh -c ". ./admin/.venv/bin/activate && \
             python ./admin/admin_panel/manage.py collectstatic --no-input && \
             python ./admin/admin_panel/manage.py migrate && \
             python ./admin/admin_panel/manage.py runserver 0.0.0.0:8000"
    env_file: ".env"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - postgres_network
      - nginx_network
    volumes:
      - static:/Telegram_Shop/static

  nginx:
    container_name: telegram_shop-nginx
    build:
      context: ./nginx
    ports:
      - "8000:80"
    depends_on:
      admin-panel:
        condition: service_started
    restart: always
    networks:
      - nginx_network
    volumes:
      - static:/static

networks:
  redis_network:
    driver: bridge
  postgres_network:
    driver: bridge
  nginx_network:
    driver: bridge

volumes:
  static:
